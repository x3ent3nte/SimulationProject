#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512
#define PI 3.14159265358979323846264338327950288

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    uint typeId;
    int playerId;
    vec3 position;
    vec3 velocity;
    vec3 rotationalVelocity;
    vec4 rotation;
    float radius;
    float mass;
    float life;
};

readonly layout (std430, binding = 0) buffer bufferAgentIn {
    Agent agentsIn[];
};

readonly layout (std430, binding = 1) buffer bufferAddresses {
    uint addresses[];
};

writeonly layout (std430, binding = 2) buffer bufferAgentOut {
    Agent agentsOut[];
};

layout (push_constant) uniform InfoConstant {
    uint numberOfElements;
} info;

vec4 hamiltonProduct(vec4 a, vec4 b) {
    const float r = (a.w * b.w) - (a.x * b.x) - (a.y * b.y) - (a.z * b.z);
    const float i = (a.w * b.x) + (a.x * b.w) + (a.y * b.z) - (a.z * b.y);
    const float j = (a.w * b.y) - (a.x * b.z) + (a.y * b.w) + (a.z * b.x);
    const float k = (a.w * b.z) + (a.x * b.y) - (a.y * b.x) + (a.z * b.w);

    return vec4(i, j, k, r);
}

vec4 inverseQuaternion(vec4 q) {
    return vec4(-q.x, -q.y, -q.z, q.w);
}

vec3 rotatePointByQuaternion(vec3 p, vec4 q) {
    const vec4 p4 = vec4(p, 0.0f);
    const vec4 qi = inverseQuaternion(q);

    return hamiltonProduct(hamiltonProduct(q, p4), qi).xyz;
}

vec4 axisAndThetaToQuaternion(vec3 axis, float theta) {
    const float thetaHalved = theta / 2;
    return vec4(axis * sin(thetaHalved), cos(thetaHalved));
}

float randomBetweenZeroAndOne(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

float randomBetweenMinusOneAndOne(vec2 co){
    return (randomBetweenZeroAndOne(co) * 2.0f) - 1.0f;
}

Agent spawnPlasma(inout Agent agent) {
    Agent agentSpawn = agent;
    agentSpawn.playerId = -1;
    agentSpawn.typeId = 3;

    const vec3 canonicalForward = vec3(0.0f, 0.0f, -1.0f);
    const vec3 forward = rotatePointByQuaternion(canonicalForward, agent.rotation);

    const float xSpread = randomBetweenMinusOneAndOne(agent.position.xy) * PI * 0.01;
    const float ySpread = randomBetweenMinusOneAndOne(agent.position.yz) * PI * 0.01;
    const vec4 xSpreadQuaternion = axisAndThetaToQuaternion(vec3(1.0f, 0.0f, 0.0f), xSpread);
    const vec4 ySpreadQuaternion = axisAndThetaToQuaternion(vec3(0.0f, 1.0f, 0.0f), ySpread);
    const vec4 xySpreadQuaternion = hamiltonProduct(ySpreadQuaternion, xSpreadQuaternion);
    const vec3 spreadDir = rotatePointByQuaternion(forward, xySpreadQuaternion);

    agentSpawn.position += spreadDir * 20.0f;
    agentSpawn.rotation = hamiltonProduct(xySpreadQuaternion, agentSpawn.rotation);
    agentSpawn.velocity += spreadDir * 4700.0f;
    agentSpawn.mass = 4000;
    agentSpawn.radius = 5.0f;
    agentSpawn.life = 100.0f;

    return agentSpawn;
}

Agent spawnSmallAsteroid(inout Agent agent) {
    Agent agentSpawn = agent;
    agentSpawn.playerId = -1;
    agentSpawn.typeId = 4;
    agentSpawn.life = 100.0f;
    agentSpawn.radius = agent.radius / 3.0f;
    agentSpawn.mass = agent.mass / 27.0f;

    return agentSpawn;
}

Agent spawnAgent(inout Agent agent) {
    if (agent.typeId == 0) {
        return spawnPlasma(agent);
    } else {
        return spawnSmallAsteroid(agent);
    }
}

void main() {
    const uint index = gl_GlobalInvocationID.x;

    if (index >= info.numberOfElements) { return; }

    uint address;
    if (index == 0) {
        address = 0;
    } else {
        address = addresses[index - 1];
    }

    Agent agent = agentsIn[index];

    const uint alive = uint(agent.life > 0.0f);
    const uint numberToSpawn = (addresses[index] - address) - alive;

    for (uint i = 0; i < numberToSpawn; ++i) {
        agentsOut[address + alive + i] = spawnAgent(agent);
    }

    if (alive == 1) {
        agentsOut[address] = agent;
    }
}
