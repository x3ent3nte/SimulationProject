#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512

#define DETECTION_RADIUS 30

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    vec3 position;
    vec3 velocity;
    vec3 acceleration;
    vec3 target;
    vec4 rotation;
    float radius;
};

layout (std430, binding = 0) buffer bufAgentsIn {
    Agent agentsIn[];
};

layout (std430, binding = 1) buffer bufAgentsOut {
    Agent agentsOut[];
};

layout (std430, binding = 2) buffer bufferTimeDelta {
    float timeDelta;
};

layout (std430, binding = 3) buffer bufferNumberOfElements {
    uint numberOfElements;
};

struct Steering {
    vec3 averagePosition;
    vec3 averageHeading;
    vec3 averageTooCloseHeading;
};

vec3 safeNormalize(vec3 v) {
    float mag = length(v);
    if (mag <= 0.0f) {
        return vec3(1.0f, 0.0f, 0.0f);
    } else {
        return v / mag;
    }
}

float cosineSimilarity(vec3 a, vec3 b) {
    float magMult = length(a) * length(b);
    if (magMult <= 0.0f) {
        return 0.0f;
    }

    return dot(a, b) / magMult;
}

vec4 hamiltonProduct(vec4 a, vec4 b) {
    float r = (a.w * b.w) - (a.x * b.x) - (a.y * b.y) - (a.z * b.z);
    float i = (a.w * b.x) + (a.x * b.w) + (a.y * b.z) - (a.z * b.y);
    float j = (a.w * b.y) - (a.x * b.z) + (a.y * b.w) + (a.z * b.x);
    float k = (a.w * b.z) + (a.x * b.y) - (a.y * b.x) + (a.z * b.w);

    return vec4(i, j, k, r);
}

vec4 inverseQuaternion(vec4 q) {
    return vec4(-q.x, -q.y, -q.z, q.w);
}

vec3 rotatePointByQuaternion(vec3 p, vec4 q) {
    vec4 p4 = vec4(p, 0.0f);
    vec4 qi = inverseQuaternion(q);

    return hamiltonProduct(hamiltonProduct(q, p4), qi).xyz;
}

vec4 createQuaternionFromAxisAndTheta(vec3 axis, float theta) {
    float thetaHalved = theta / 2;
    return vec4(sin(thetaHalved) * axis, cos(thetaHalved));
}

vec3 rotatePointByAxisAndTheta(vec3 p, vec3 axis, float theta) {
    return rotatePointByQuaternion(p, createQuaternionFromAxisAndTheta(axis, theta));
}

vec3 calculateForward(vec4 rotation) {
    return rotatePointByQuaternion(vec3(0.0f, 0.0f, -1.0f), rotation);
}

void checkAgent(
    inout Agent agent,
    inout Agent otherAgent,
    inout vec3 sumHeading,
    inout vec3 sumPosition,
    inout vec3 sumTooCloseHeading,
    inout uint numBoids) {

    float distanceBetween = length(otherAgent.position - agent.position);
    if (distanceBetween < DETECTION_RADIUS) {
        vec3 otherAgentForward = calculateForward(otherAgent.rotation);

        sumPosition += otherAgent.position;

        if (distanceBetween < DETECTION_RADIUS / 2) {
            sumTooCloseHeading += otherAgentForward;
        } else {
            sumHeading += otherAgentForward;
        }

        numBoids += 1;
    }
}

Steering calculateSteering(Agent agent, uint index) {

    vec3 sumHeading = calculateForward(agent.rotation);
    vec3 sumPosition = agent.position;
    vec3 sumTooCloseHeading = vec3(0.0f);
    uint numBoids = 1;

    for (uint i = index; i < numberOfElements - 1; ++i) {
        Agent otherAgent = agentsIn[i + 1];
        if (abs(otherAgent.position.x - agent.position.x) >= DETECTION_RADIUS) {
            break;
        }

        checkAgent(agent, otherAgent, sumHeading, sumPosition, sumTooCloseHeading, numBoids);
    }

    for (uint i = index; i >= 1; --i) {
        Agent otherAgent = agentsIn[i - 1];
        if (abs(otherAgent.position.x - agent.position.x) >= DETECTION_RADIUS) {
            break;
        }

        checkAgent(agent, otherAgent, sumHeading, sumPosition, sumTooCloseHeading, numBoids);
    }

    return Steering(sumPosition / numBoids, sumHeading / numBoids, sumTooCloseHeading / numBoids);
}

vec4 calculateChangeInRotation(vec3 current, vec3 desired) {
    float cosSim = cosineSimilarity(current, desired);
    float angleBetween = acos(cosSim);

    float theta = min(angleBetween, 0.03);
    vec3 targetRight = cross(current, desired);
    return createQuaternionFromAxisAndTheta(targetRight, theta);
}

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= numberOfElements) {
        return;
    }

    Agent agent = agentsIn[index];

    Steering steering = calculateSteering(agent, index);

    const vec3 canonicalForward = vec3(0.0f, 0.0f, -1.0f);
    vec3 forward = rotatePointByQuaternion(canonicalForward, agent.rotation);

    vec3 targetCohesion = safeNormalize(steering.averagePosition - agent.position);
    vec4 cohesionQuaternion = calculateChangeInRotation(forward, targetCohesion);

    vec4 alignmentQuaternion = calculateChangeInRotation(forward, steering.averageHeading);

    vec4 separationQuaternion = calculateChangeInRotation(forward, -steering.averageTooCloseHeading);

    vec4 steeringQuaternion = normalize(
        hamiltonProduct(
            separationQuaternion,
            normalize(
                hamiltonProduct(cohesionQuaternion, alignmentQuaternion))));

    agent.rotation = normalize(hamiltonProduct(steeringQuaternion, agent.rotation));
    forward = rotatePointByQuaternion(canonicalForward, agent.rotation);

    agent.velocity = forward * 90.0f;

    agentsOut[index] = agent;
}
