#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512

#define DETECTION_RADIUS 550

#define PI 3.14159265358979323846264338327950288

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    uint typeId;
    int playerId;
    vec3 position;
    vec3 velocity;
    vec3 acceleration;
    vec3 target;
    vec3 rotationalVelocity;
    vec4 rotation;
    float radius;
    float mass;
};

readonly layout (std430, binding = 0) buffer bufAgentsIn {
    Agent agentsIn[];
};

writeonly layout (std430, binding = 1) buffer bufAgentsOut {
    Agent agentsOut[];
};

writeonly layout (std430, binding = 2) buffer bufReproduction {
    uint reproduction[];
};

readonly layout (std430, binding = 3) buffer bufferTimeDelta {
    float timeDelta;
};

readonly layout (std430, binding = 4) buffer bufferNumberOfElements {
    uint numberOfElements;
};

readonly layout (std430, binding = 5) buffer bufferPlayerInputStates {
    uint playerInputStates[];
};

struct Steering {
    vec3 alignment;
    vec3 cohesion;
    vec3 separation;
};

vec3 safeNormalize(vec3 v) {
    const float mag = length(v);
    if (mag > 0.0f) {
        return v / mag;
    } else {
       return vec3(1.0f, 0.0f, 0.0f);
    }
}

float cosineSimilarity(vec3 a, vec3 b) {
    const float magMult = length(a) * length(b);
    if (magMult <= 0.0f) {
        return 0.0f;
    }

    return dot(a, b) / magMult;
}

vec3 projection(vec3 u, vec3 v) {
    const float magV = length(v);
    return (dot(u, v) / (magV * magV)) * v;
}

const vec3 canonicalForward = vec3(0.0f, 0.0f, -1.0f);
const vec3 canonicalUp = vec3(0.0f, 1.0f, 0.0f);
const vec3 canonicalRight = vec3(1.0f, 0.0f, 0.0f);

vec3 axisAndThetaToEuler(vec3 axis, float theta) {
    const float forwardSim = cosineSimilarity(axis, canonicalForward);
    const float upSim = cosineSimilarity(axis, canonicalUp);
    const float rightSim = cosineSimilarity(axis, canonicalRight);

    return safeNormalize(vec3(rightSim, upSim, forwardSim)) * theta;
}

vec4 quaternionToAxisAndTheta(vec4 q) {
    const float thetaHalved = acos(q.w);
    const float sinThetaHalved = sin(thetaHalved);
    vec3 axis = vec3(0.0f, 0.0f, 0.0f);
    if (sinThetaHalved != 0.0f) {
        axis = q.xyz / sinThetaHalved;
    }
    return vec4(axis, thetaHalved * 2.0f);
}

vec4 hamiltonProduct(vec4 a, vec4 b) {
    const float r = (a.w * b.w) - (a.x * b.x) - (a.y * b.y) - (a.z * b.z);
    const float i = (a.w * b.x) + (a.x * b.w) + (a.y * b.z) - (a.z * b.y);
    const float j = (a.w * b.y) - (a.x * b.z) + (a.y * b.w) + (a.z * b.x);
    const float k = (a.w * b.z) + (a.x * b.y) - (a.y * b.x) + (a.z * b.w);

    return vec4(i, j, k, r);
}

vec4 inverseQuaternion(vec4 q) {
    return vec4(-q.x, -q.y, -q.z, q.w);
}

vec4 quaternionBetween(vec4 pre, vec4 post) {
    return hamiltonProduct(post, inverseQuaternion(pre));
}

vec3 rotatePointByQuaternion(vec3 p, vec4 q) {
    const vec4 p4 = vec4(p, 0.0f);
    const vec4 qi = inverseQuaternion(q);

    return hamiltonProduct(hamiltonProduct(q, p4), qi).xyz;
}

vec4 axisAndThetaToQuaternion(vec3 axis, float theta) {
    const float thetaHalved = theta / 2;
    return vec4(axis * sin(thetaHalved), cos(thetaHalved));
}

vec4 eulerToQuaternion(vec3 euler) {
    vec4 q = axisAndThetaToQuaternion(canonicalRight, euler.x);
    q = normalize(hamiltonProduct(axisAndThetaToQuaternion(canonicalUp, euler.y), q));
    return normalize(hamiltonProduct(axisAndThetaToQuaternion(canonicalForward, euler.z), q));
}

vec4 eulerToAxisAndTheta(vec3 euler) {
    return quaternionToAxisAndTheta(eulerToQuaternion(euler));
}

vec3 calculateForward(vec4 rotation) {
    return rotatePointByQuaternion(canonicalForward, rotation);
}

void checkAgent(
    inout Agent agent,
    inout Agent otherAgent,
    inout vec3 sumAlignment,
    inout vec3 sumCohesion,
    inout vec3 sumSeparation,
    inout uint numBoids) {

    const float distanceBetween = length(otherAgent.position - agent.position);
    if (distanceBetween < DETECTION_RADIUS) {
        vec3 otherAgentForward = calculateForward(otherAgent.rotation);

        //sumAlignment += otherAgentForward * (distanceBetween / DETECTION_RADIUS);
        sumAlignment += otherAgentForward;

        const float tooCloseRadius = DETECTION_RADIUS / 2;

        if (distanceBetween < tooCloseRadius) {
            sumSeparation += (agent.position - otherAgent.position) * ((tooCloseRadius - distanceBetween) / tooCloseRadius);
        } else {
            //sumCohesion += (otherAgent.position - agent.position) * ((DETECTION_RADIUS - distanceBetween) / DETECTION_RADIUS);
            sumCohesion += (otherAgent.position - agent.position);
        }

        numBoids += 1;
    }
}

Steering calculateSteering(Agent agent, uint index) {

    vec3 sumAlignment = calculateForward(agent.rotation);
    vec3 sumCohesion = agent.position;
    vec3 sumSeparation = agent.position;
    uint numBoids = 1;

    for (uint i = index; i < numberOfElements - 1; ++i) {
        Agent otherAgent = agentsIn[i + 1];
        if (abs(otherAgent.position.x - agent.position.x) >= DETECTION_RADIUS) {
            break;
        }

        checkAgent(agent, otherAgent, sumAlignment, sumCohesion, sumSeparation, numBoids);
    }

    for (uint i = index; i >= 1; --i) {
        Agent otherAgent = agentsIn[i - 1];
        if (abs(otherAgent.position.x - agent.position.x) >= DETECTION_RADIUS) {
            break;
        }

        checkAgent(agent, otherAgent, sumAlignment, sumCohesion, sumSeparation, numBoids);
    }

    return Steering(
        safeNormalize(sumAlignment / numBoids),
        safeNormalize(sumCohesion / numBoids),
        safeNormalize(sumSeparation / numBoids));
}

vec3 calculateRotationalAcceleration(vec4 targetQuaternion, vec4 rotationQuaternion, vec3 rotationlVelocity) {
    vec3 euler = vec3(0.0f, 0.0f, 0.0f);

    const vec4 deltaQuaternion = quaternionBetween(rotationQuaternion, targetQuaternion);
    vec4 deltaAxisAndTheta = quaternionToAxisAndTheta(deltaQuaternion);

    if (deltaAxisAndTheta.w > PI) {
        deltaAxisAndTheta.w = PI - deltaAxisAndTheta.w;
    }

    const float maxRotationalAcceleration = 25.0f;

    const vec3 deltaEuler = axisAndThetaToEuler(deltaAxisAndTheta.xyz, deltaAxisAndTheta.w);
    const float deltaEulerMag = length(deltaEuler);
    if (deltaEulerMag > 0) {
        const vec3 rotationalVelocityProjection = projection(rotationlVelocity, deltaEuler);
        const float rotationalVelocityProjectionMag = length(rotationalVelocityProjection);
        const float timeToTarget = deltaEulerMag / rotationalVelocityProjectionMag;
        const float timeToDecelerate = rotationalVelocityProjectionMag / maxRotationalAcceleration;

        const float timeAccelerating = max(0.0f, min(timeDelta, timeToTarget - timeToDecelerate));
        const float timeDecelerating = timeDelta - timeAccelerating;

        const vec3 deltaEulerNorm = deltaEuler / deltaEulerMag;
        const vec3 acceleration = maxRotationalAcceleration * timeAccelerating * deltaEulerNorm;
        const vec3 deceleration = maxRotationalAcceleration * timeDecelerating * -deltaEulerNorm;

        euler += acceleration + deceleration;

        // Stabalize rejection
        const vec3 rotationalVelocityRejection = rotationlVelocity - rotationalVelocityProjection;
        const float rotationalVelocityRejectionMag = length(rotationalVelocityRejection);
        if (rotationalVelocityRejectionMag > 0) {
            const float stabalizeRejectionAcc = min(maxRotationalAcceleration * timeDelta, rotationalVelocityRejectionMag);
            euler += -stabalizeRejectionAcc * (rotationalVelocityRejection / rotationalVelocityRejectionMag);
        }
    }
    return euler;
}

vec3 calculateChangeInRotationalVelocity(vec3 forward, vec3 target, vec4 rotation, vec3 rotationalVelocity) {
    const float cosSim = cosineSimilarity(forward, target);
    const float angleBetween = acos(cosSim);

    const float theta = min(angleBetween, timeDelta * 30.0f);
    const vec3 targetRight = cross(forward, target);
    //return axisAndThetaToQuaternion(targetRight, theta);
    //return axisAndThetaToEuler(targetRight, theta);
    vec4 targetQuaternion = normalize(hamiltonProduct(axisAndThetaToQuaternion(targetRight, theta), rotation));
    return calculateRotationalAcceleration(targetQuaternion, rotation, rotationalVelocity);
}

vec3 calculateAcceleration(vec3 target, vec3 position, vec3 velocity) {

    vec3 acceleration = vec3(0.0f, 0.0f, 0.0f);

    const float maxAcceleration = 375.0f;
    const vec3 delta = target - position;
    const float deltaMag = length(delta);
    if (deltaMag > 0) {
        const vec3 velocityProjection = projection(velocity, delta);
        const float velocityProjectionMag = length(velocityProjection);
        const float infinity = 1.0f / 0.0f;

        const float cosSim = cosineSimilarity(velocityProjection, delta);
        float timeToTarget = infinity;
        if (cosSim > 0.0f) {
            timeToTarget = deltaMag / velocityProjectionMag;
        }
        const float timeToDecelerate = velocityProjectionMag / maxAcceleration;

        const float timeAccelerating = max(0.0f, min(timeDelta, timeToTarget - timeToDecelerate));
        const float timeDecelerating = timeDelta - timeAccelerating;

        const vec3 deltaNorm = delta / deltaMag;
        acceleration += (timeAccelerating * maxAcceleration * deltaNorm) + (timeDecelerating * maxAcceleration * -deltaNorm);

        const vec3 velocityRejection = velocity - velocityProjection;
        const float velocityRejectionMag = length(velocityRejection);
        if (velocityRejectionMag > 0) {
            const float rejectionAcc = min(maxAcceleration * timeDelta, velocityRejectionMag);
            acceleration -= rejectionAcc * (velocityRejection / velocityRejectionMag);
        }
    }

    return acceleration;
}

const int kForwardBit = 0;
const int kBackBit = 1;
const int kLeftBit = 2;
const int kRightBit = 3;
const int kUpBit = 4;
const int kDownBit = 5;
const int kPitchUpBit = 6;
const int kPitchDownBit = 7;
const int kYawLeftBit = 8;
const int kYawRightBit = 9;
const int kRollLeftBit = 10;
const int kRollRightBit = 11;
const int kStabalizeRotationalVelocityBit = 12;
const int kStabalizeRotationBit = 13;
const int kSpawnBit = 14;
const int kBrakeBit = 15;
const int kZeroPositionBit = 16;

int computeInputValue(uint inputState, uint bitPos) {
    const uint bitMask = 1 << bitPos;
    const uint anded = inputState & bitMask;
    return int(anded >> bitPos);
}

void processPlayerAgent(inout Agent agent) {
    const uint inputState = playerInputStates[agent.playerId];

    const vec3 forward = rotatePointByQuaternion(canonicalForward, agent.rotation);
    const vec3 up = rotatePointByQuaternion(canonicalUp, agent.rotation);
    const vec3 right = cross(forward, up);

    const float accFloat = timeDelta * 1500.0f;
    const float rotationalAccFloat = timeDelta * 7.0f;

    vec3 acceleration = forward * accFloat * (computeInputValue(inputState, kForwardBit) - computeInputValue(inputState, kBackBit));
    acceleration += up * accFloat * (computeInputValue(inputState, kUpBit) - computeInputValue(inputState, kDownBit));
    acceleration += right * accFloat * (computeInputValue(inputState, kRightBit) - computeInputValue(inputState, kLeftBit));

    if (computeInputValue(inputState, kBrakeBit) == 1) {
        const float velocityMag = length(agent.velocity);
        if (velocityMag > 0.0f) {
            float stabalizationAcc = min(accFloat, velocityMag);
            vec3 velocityNorm = agent.velocity / velocityMag;
            acceleration += velocityNorm * -stabalizationAcc;
        }
    }

    if (computeInputValue(inputState, kZeroPositionBit) == 1) {
        acceleration += calculateAcceleration(vec3(1.0f, 1.0f, 1.0f), agent.position, agent.velocity);
    }

    const int pitchInput = computeInputValue(inputState, kPitchUpBit) - computeInputValue(inputState, kPitchDownBit);
    const int yawInput = computeInputValue(inputState, kYawLeftBit) - computeInputValue(inputState, kYawRightBit);
    const int rollInput = computeInputValue(inputState, kRollRightBit) - computeInputValue(inputState, kRollLeftBit);

    /*vec4 rotationalAcceleration = axisAndThetaToQuaternion(right, rotationalAccFloat * pitchInput);
    rotationalAcceleration = normalize(hamiltonProduct(axisAndThetaToQuaternion(up, rotationalAccFloat * yawInput), rotationalAcceleration));
    rotationalAcceleration = normalize(hamiltonProduct(axisAndThetaToQuaternion(forward, rotationalAccFloat * rollInput), rotationalAcceleration));
    agent.rotationalVelocity = normalize(hamiltonProduct(rotationalAcceleration, agent.rotationalVelocity));*/

    vec3 euler = axisAndThetaToEuler(right, rotationalAccFloat * pitchInput);
    euler += axisAndThetaToEuler(up, rotationalAccFloat * yawInput);
    euler += axisAndThetaToEuler(forward, rotationalAccFloat * rollInput);

    if (computeInputValue(inputState, kStabalizeRotationalVelocityBit) == 1) {
        const float rotationalVelocityMag = length(agent.rotationalVelocity);
        if (rotationalVelocityMag > 0) {
            const float stabalizeAcc = min(rotationalAccFloat, rotationalVelocityMag);
            euler += -stabalizeAcc * (agent.rotationalVelocity / rotationalVelocityMag);
        }
    }

    if (computeInputValue(inputState, kStabalizeRotationBit) == 1) {

        euler += calculateRotationalAcceleration(
            axisAndThetaToQuaternion(vec3(0.0f, 0.0f, 0.0f), 0.0f),
            agent.rotation,
            agent.rotationalVelocity);
    }

    agent.rotationalVelocity += euler;
    agent.velocity += acceleration;
}

void processSpaceShip(inout Agent agent, uint index) {

    uint reproductionFactor = 1;

    if (agent.playerId < 0) {
        Steering steering = calculateSteering(agent, index);

        const vec3 steeringVector = safeNormalize(
            (7 * steering.alignment) +
            (7 * steering.cohesion) +
            (11 * steering.separation));

        const vec3 forward = rotatePointByQuaternion(canonicalForward, agent.rotation);
        agent.rotationalVelocity += calculateChangeInRotationalVelocity(forward, steeringVector, agent.rotation, agent.rotationalVelocity);

        const vec3 target = agent.position + (forward * 50.0f);
        agent.velocity += calculateAcceleration(target, agent.position, agent.velocity);
    } else {
        processPlayerAgent(agent);
        if (computeInputValue(playerInputStates[agent.playerId], kSpawnBit) == 1) {
            reproductionFactor = 2;
        }
    }

    reproduction[index] = reproductionFactor;
}

void processAsteroid(inout Agent agent, uint index) {
    reproduction[index] = 1;
}

void main() {
    const uint index = gl_GlobalInvocationID.x;

    if (index >= numberOfElements) {
        return;
    }

    Agent agent = agentsIn[index];

    switch (agent.typeId) {
        case 0:
        case 1: {
           processSpaceShip(agent, index);
           break;
        }
        case 2:
        case 3: {
            processAsteroid(agent, index);
            break;
        }
    }

    agentsOut[index] = agent;
}
