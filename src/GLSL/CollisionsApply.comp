#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 256

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    uint typeId;
    int playerId;
    vec3 position;
    vec3 velocity;
    vec3 acceleration;
    vec3 target;
    vec3 rotationalVelocity;
    vec4 rotation;
    float radius;
    float mass;
    float life;
};

struct ComputedCollision {
    uint agentIndex;
    float time;
    vec3 velocityDelta;
};

layout (std430, binding = 0) buffer agentsBuffer {
    Agent agents[];
};

readonly layout (std430, binding = 1) buffer collisionsBuffer {
    ComputedCollision collisions[];
};

readonly layout (std430, binding = 2) buffer timeDeltaBuffer {
    float timeDelta;
};

readonly layout (std430, binding = 3) buffer numberOfElementsBuffer {
    uint numberOfElements;
};

readonly layout (std430, binding = 4) buffer numberOfCollisionsBuffer {
    int numberOfCollisions;
};

int findStartIndex(uint index) {
    int left = 0;
    int right = numberOfCollisions;

    int startIndex = -1;

    while (true) {
        if (right <= left) {
            break;
        }

        int mid = ((right - left) / 2) + left;
        const uint agentIndex = collisions[mid].agentIndex;
        if (agentIndex == index) {
            startIndex = mid;
            break;
        } else if (index < agentIndex) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    for (int i = startIndex; i >= 0; --i) {
        if (collisions[i].agentIndex == index) {
            startIndex = i;
        } else {
            break;
        }
    }

    return startIndex;
}

vec4 hamiltonProduct(vec4 a, vec4 b) {
    float r = (a.w * b.w) - (a.x * b.x) - (a.y * b.y) - (a.z * b.z);
    float i = (a.w * b.x) + (a.x * b.w) + (a.y * b.z) - (a.z * b.y);
    float j = (a.w * b.y) - (a.x * b.z) + (a.y * b.w) + (a.z * b.x);
    float k = (a.w * b.z) + (a.x * b.y) - (a.y * b.x) + (a.z * b.w);

    return vec4(i, j, k, r);
}

vec4 axisAndThetaToQuaternion(vec3 axis, float theta) {
    float thetaHalved = theta / 2;
    return vec4(axis * sin(thetaHalved), cos(thetaHalved));
}

const vec3 canonicalForward = vec3(0.0f, 0.0f, -1.0f);
const vec3 canonicalUp = vec3(0.0f, 1.0f, 0.0f);
const vec3 canonicalRight = vec3(1.0f, 0.0f, 0.0f);

vec4 eulerToQuaternion(vec3 euler) {
    vec4 q = axisAndThetaToQuaternion(canonicalRight, euler.x);
    q = normalize(hamiltonProduct(axisAndThetaToQuaternion(canonicalUp, euler.y), q));
    return normalize(hamiltonProduct(axisAndThetaToQuaternion(canonicalForward, euler.z), q));
}

void main() {
    const uint index = gl_GlobalInvocationID.x;

    if (index >= numberOfElements) { return; }

    const Agent agent = agents[index];

    const int startIndex = findStartIndex(index);

    const vec3 originalVelocity = agent.velocity;
    const vec3 originalPosition = agent.position;

    float currentTime = 0.0f;
    vec3 newVelocity = originalVelocity;
    vec3 newPosition = originalPosition;

    if (startIndex >= 0) {
        for (int i = startIndex; i < numberOfCollisions; ++i) {
            ComputedCollision col = collisions[i];
            if (col.agentIndex != index) {
                break;
            }

            newPosition += originalVelocity * col.time;
            newVelocity += col.velocityDelta;
        }
    }

    const float timeRemaining = timeDelta - currentTime;
    if (timeRemaining > 0.0f) {
        newPosition += originalVelocity * timeRemaining;
    }


    agents[index].position = newPosition;
    agents[index].velocity = newVelocity;
    agents[index].rotation = normalize(hamiltonProduct(eulerToQuaternion(agent.rotationalVelocity * timeDelta), agent.rotation));
}
