#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    uint typeId;
    int playerId;
    vec3 position;
    vec3 velocity;
    vec3 rotationalVelocity;
    vec4 rotation;
    float radius;
    float mass;
    float life;
};

layout (std430, binding = 0) buffer bufferAgents {
    Agent agents[];
};

readonly layout (std430, binding = 1) buffer bufferTimeDelta {
    float timeDelta;
};

readonly layout (std430, binding = 2) buffer bufferNumberOfElements {
    uint numberOfElements;
};

vec4 hamiltonProduct(vec4 a, vec4 b) {
    float r = (a.w * b.w) - (a.x * b.x) - (a.y * b.y) - (a.z * b.z);
    float i = (a.w * b.x) + (a.x * b.w) + (a.y * b.z) - (a.z * b.y);
    float j = (a.w * b.y) - (a.x * b.z) + (a.y * b.w) + (a.z * b.x);
    float k = (a.w * b.z) + (a.x * b.y) - (a.y * b.x) + (a.z * b.w);

    return vec4(i, j, k, r);
}

vec4 axisAndThetaToQuaternion(vec3 axis, float theta) {
    float thetaHalved = theta / 2;
    return vec4(axis * sin(thetaHalved), cos(thetaHalved));
}

const vec3 canonicalForward = vec3(0.0f, 0.0f, -1.0f);
const vec3 canonicalUp = vec3(0.0f, 1.0f, 0.0f);
const vec3 canonicalRight = vec3(1.0f, 0.0f, 0.0f);

vec4 eulerToQuaternion(vec3 euler) {
    vec4 q = axisAndThetaToQuaternion(canonicalRight, euler.x);
    q = normalize(hamiltonProduct(axisAndThetaToQuaternion(canonicalUp, euler.y), q));
    return normalize(hamiltonProduct(axisAndThetaToQuaternion(canonicalForward, euler.z), q));
}

void main() {

    uint index = gl_GlobalInvocationID.x;

    if (index >= numberOfElements) { return; }

    Agent agent = agents[index];

    agent.position += agent.velocity * timeDelta;
    agent.rotation = normalize(hamiltonProduct(eulerToQuaternion(agent.rotationalVelocity * timeDelta), agent.rotation));

    agents[index] = agent;
}
