#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    vec3 position;
    vec3 velocity;
    vec3 acceleration;
    vec3 target;
    vec4 rotation;
    vec4 rotationalVelocity;
    float radius;
};

layout (std430, binding = 0) buffer bufferAgents {
    Agent agents[];
};

layout (std430, binding = 1) buffer bufferTimeDelta {
    float timeDelta;
};

layout (std430, binding = 2) buffer bufferNumberOfElements {
    uint numberOfElements;
};

vec4 hamiltonProduct(vec4 a, vec4 b) {
    float r = (a.w * b.w) - (a.x * b.x) - (a.y * b.y) - (a.z * b.z);
    float i = (a.w * b.x) + (a.x * b.w) + (a.y * b.z) - (a.z * b.y);
    float j = (a.w * b.y) - (a.x * b.z) + (a.y * b.w) + (a.z * b.x);
    float k = (a.w * b.z) + (a.x * b.y) - (a.y * b.x) + (a.z * b.w);

    return vec4(i, j, k, r);
}

vec4 rotationalVelocityMultipliedByTime(vec4 rotationalVelocity, float timeDelta) {
    float theta = 2 * acos(rotationalVelocity.w) * timeDelta;
    return normalize(vec4(rotationalVelocity.xyz, cos(theta / 2)));
}

void main() {

    uint index = gl_GlobalInvocationID.x;

    if (index >= numberOfElements) { return; }

    Agent agent = agents[index];

    agent.position += agent.velocity * timeDelta;
    agent.rotation = normalize(hamiltonProduct(
        rotationalVelocityMultipliedByTime(agent.rotationalVelocity, timeDelta),
        agent.rotation));

    agents[index] = agent;
}
