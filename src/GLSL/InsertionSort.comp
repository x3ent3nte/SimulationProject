#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct ValueAndIndex {
    float value;
    uint index;
};

layout (std430, binding = 0) buffer bufferData {
    ValueAndIndex data[];
};

layout (std430, binding = 1) buffer bufferWasSwapped {
    uint wasSwapped;
};

layout (std430, binding = 2) buffer bufferInfo {
    uint offset;
    uint dataSize;
};

shared ValueAndIndex sharedData[2 * X_DIM];
shared uint localWasSwapped[1];

void main() {

    uint globalOffset = offset + (gl_WorkGroupID.x * X_DIM * 2);
    uint localLeftIndex = gl_LocalInvocationID.x * 2;
    uint globalLeftIndex = globalOffset + localLeftIndex;

    if (globalLeftIndex >= dataSize) { return; }

    uint globalRightIndex = globalLeftIndex + 1;
    uint localRightIndex = localLeftIndex + 1;
    uint localRightIndexPlusOne = localRightIndex + 1;

    uint localSize = min(2 * X_DIM, dataSize - globalOffset);

    sharedData[localLeftIndex] = data[globalLeftIndex];
    if (globalRightIndex < dataSize) {
        sharedData[localRightIndex] = data[globalRightIndex];
    }


    do {

        barrier();

        localWasSwapped[0] = 0;

        barrier();

        if (localRightIndex < localSize) {
            ValueAndIndex left = sharedData[localLeftIndex];
            ValueAndIndex right = sharedData[localRightIndex];
            if (left.value > right.value) {
                sharedData[localLeftIndex] = right;
                sharedData[localRightIndex] = left;
                wasSwapped = 1;
                localWasSwapped[0] = 1;
            }
        }

        barrier();

        if (localRightIndexPlusOne < localSize) {
            ValueAndIndex left = sharedData[localRightIndex];
            ValueAndIndex right = sharedData[localRightIndexPlusOne];
            if (left.value > right.value) {
                sharedData[localRightIndex] = right;
                sharedData[localRightIndexPlusOne] = left;
                wasSwapped = 1;
                localWasSwapped[0] = 1;
            }
        }

        barrier();
    } while (localWasSwapped[0] != 0);

    data[globalLeftIndex] = sharedData[localLeftIndex];
    if (globalRightIndex < dataSize) {
        data[globalRightIndex] = sharedData[localRightIndex];
    }

    /*
    data[globalLeftIndex] = ValueAndIndex(localLeftIndex, offset);
    if (globalRightIndex < dataSize) {
        data[globalRightIndex] = ValueAndIndex(localRightIndex, globalOffset);
    }
    */

    /*
    data[globalLeftIndex] = ValueAndIndex(globalLeftIndex + data[globalLeftIndex].value, globalLeftIndex);
    if (globalRightIndex < dataSize) {
        data[globalRightIndex] = ValueAndIndex(globalRightIndex + data[globalRightIndex].value, globalRightIndex);
    }*/

}
