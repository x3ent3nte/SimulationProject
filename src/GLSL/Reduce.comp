#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 256

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Collision {
    uint one;
    uint two;
    float time;
};

readonly layout (std430, binding = 0) buffer bufferDataIn {
    Collision dataIn[];
};

writeonly layout (std430, binding = 1) buffer bufferDataOut {
    Collision dataOut[];
};

readonly layout (push_constant) uniform Info {
    uint numberOfElements;
} info;

shared Collision sharedData[X_DIM];

void main() {

    const uint globalOffset = gl_WorkGroupID.x * X_DIM * 2;
    const uint localIndex = gl_LocalInvocationID.x;
    const uint globalIndex = globalOffset + localIndex;

    const uint numberOfElements = info.numberOfElements;

    if (globalIndex >= numberOfElements) { return; }

    Collision myValue = dataIn[globalIndex];
    const uint firstOtherIndex = globalIndex + X_DIM;
    if (firstOtherIndex < numberOfElements) {
        Collision otherValue = dataIn[firstOtherIndex];
        if (otherValue.time < myValue.time) {
            myValue = otherValue;
        }
    }

    sharedData[localIndex] = myValue;

    const uint localSize = min(X_DIM, numberOfElements - globalOffset);

    for (int offset = (X_DIM / 2); offset > 0; offset >>= 1) {
        barrier();
        if (localIndex < offset) {
            uint otherIndex = localIndex + offset;
            if (otherIndex < localSize) {
                Collision myValue = sharedData[localIndex];
                Collision otherValue = sharedData[otherIndex];

                if (otherValue.time < myValue.time) {
                    sharedData[localIndex] = otherValue;
                }
            }
        }
    }

    barrier();

    if (localIndex == 0) {
        dataOut[gl_WorkGroupID.x] = sharedData[0];
    }
}
