#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 256
#define MAX_COLLISIONS_PER_AGENT 10

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    uint typeId;
    int playerId;
    vec3 position;
    vec3 velocity;
    vec3 acceleration;
    vec3 target;
    vec3 rotationalVelocity;
    vec4 rotation;
    float radius;
    float mass;
    float life;
};

struct Collision {
    uint one;
    uint two;
    float time;
};

readonly layout (std430, binding = 0) buffer agentsBuffer {
    Agent agents[];
};

writeonly layout (std430, binding = 1) buffer collisionsBuffer {
    Collision collisions[];
};

writeonly layout (std430, binding = 2) buffer numberOfCollisionsBuffer {
    uint numberOfCollisions[];
};

readonly layout (std430, binding = 3) buffer timeDeltaBuffer {
    float timeDelta;
};

readonly layout (std430, binding = 4) buffer numberOfElementsBuffer {
    uint numberOfElements;
};

struct QuadraticSolution {
    bool exists;
    float sol1;
    float sol2;
};

QuadraticSolution solveQuadraticEquation(vec3 q) {
    if (q.x == 0.0f) {
        return QuadraticSolution(false, 0.0f, 0.0f);
    }

    float b2Minus4AC = (q.y * q.y) - (4 * q.x * q.z);

    if (b2Minus4AC < 0.0f) {
        return QuadraticSolution(false, 0.0f, 0.0f);
    }

    float sqrtB2Minus4AC = sqrt(b2Minus4AC);
    float twoA = 2 * q.x;

    float sol1 = (-q.y - sqrtB2Minus4AC) / twoA;
    float sol2 = (-q.y + sqrtB2Minus4AC) / twoA;

    return QuadraticSolution(true, sol1, sol2);
}

vec3 quadraticEquationFromVec2Squared(vec2 v) {
    return vec3(v.x * v.x, 2 * v.x * v.y, v.y * v.y);
}

QuadraticSolution calculateTimeOfImpact(inout Agent one, inout Agent two) {

    vec3 qx = quadraticEquationFromVec2Squared(vec2(two.velocity.x - one.velocity.x, two.position.x - one.position.x));
    vec3 qy = quadraticEquationFromVec2Squared(vec2(two.velocity.y - one.velocity.y, two.position.y - one.position.y));
    vec3 qz = quadraticEquationFromVec2Squared(vec2(two.velocity.z - one.velocity.z, two.position.z - one.position.z));

    vec3 qt = qx + qy + qz;
    float radiusSum = one.radius + two.radius;
    qt.z -= radiusSum * radiusSum;
    return solveQuadraticEquation(qt);
}

bool isEarlierCollision(float new, float currentEarliest) {
    return (new > 0.0f) && (new < currentEarliest);
}

float timeOfCollision(float x, float y) {
    if (x < 0.0f) {
        return y;
    } else if (y < 0.0f) {
        return x;
    } else {
        return min(x, y);
    }
}

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= numberOfElements) { return; }

    Agent agent = agents[index];

    const float minX = min(agent.position.x, agent.position.x + (agent.velocity.x * timeDelta)) - agent.radius;

    uint numCol = 0;
    Collision agentCollisions[MAX_COLLISIONS_PER_AGENT];

    for (uint i = index; i >= 1; --i) {
        const uint otherIndex = i - 1;
        Agent other = agents[otherIndex];
        const float maxX = other.radius + max(other.position.x, other.position.x + (other.velocity.x * timeDelta));

        const float xDiff = minX - maxX;
        if (xDiff > 0.0f) {
            break;
        }

        const float radiusSum = agent.radius + other.radius;
        if (length(agent.position - other.position) > radiusSum)
        {
            QuadraticSolution impact = calculateTimeOfImpact(agent, other);
            if (impact.exists) {
                const float time = timeOfCollision(impact.sol1, impact.sol2);
                if (time >= 0.0f && time < timeDelta) {
                    agentCollisions[numCol] = Collision(index, otherIndex, time);
                    numCol++;
                    if (numCol == MAX_COLLISIONS_PER_AGENT) {
                        break;
                    }
                }
            }
        }
    }

    const uint collisionsIndex = index * MAX_COLLISIONS_PER_AGENT;
    for (uint i = 0 ; i < numCol; ++i) {
        collisions[collisionsIndex + i] = agentCollisions[i];
    }

    numberOfCollisions[index] = numCol;
}


