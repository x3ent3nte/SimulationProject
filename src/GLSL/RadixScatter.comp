#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct ValueAndIndex {
    uint value;
    uint index;
};

readonly layout (std430, binding = 0) buffer dataInBuffer {
    ValueAndIndex dataIn[];
};

readonly layout (std430, binding = 1) buffer scannedBuffer {
    uvec4 scanned[];
};

writeonly layout (std430, binding = 2) buffer dataOutBuffer {
    ValueAndIndex dataOut[];
};

readonly layout (std430, binding = 3) buffer radixBuffer {
    uint radix;
};

readonly layout (std430, binding = 4) buffer numberOfElementsBuffer {
    uint numberOfElements;
};

void main() {
    const uint index = gl_GlobalInvocationID.x;

    if (index >= numberOfElements) { return; }

    const ValueAndIndex valueAndIndex = dataIn[index];
    const uint anded = (valueAndIndex.value >> radix) & 3;

    const uvec4 scanEnd = scanned[numberOfElements - 1];
    const uint yOffset = scanEnd.x;
    const uint zOffset = yOffset + scanEnd.y;
    const uint wOffset = zOffset + scanEnd.z;
    const uvec4 scanOffsets = uvec4(0, yOffset, zOffset, wOffset);

    uvec4 scan;
    if (index == 0) {
        scan = uvec4(0, 0, 0, 0);
    } else {
        scan = scanned[index - 1];
    }

    const uint outputAddress = scan[anded] + scanOffsets[anded];

    dataOut[outputAddress] = valueAndIndex;
}
