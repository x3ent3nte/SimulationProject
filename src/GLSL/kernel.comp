#version 450
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512
#define NUM_ELEMENTS 128 * X_DIM

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    vec3 position;
    vec3 velocity;
    vec3 target;
    vec4 rotation;
};

struct AgentPositionAndRotation {
    vec3 position;
    vec4 rotation;
};

layout (std430, binding = 0) buffer bufAgents {
    Agent agents[];
};

layout (std430, binding = 1) buffer bufPositions {
    AgentPositionAndRotation agentPositionAndRotation[];
};

int hashInt(int a) {
    a = (a ^ 61) ^ (a >> 16);
    a = a + (a << 3);
    a = a ^ (a >> 4);
    a = a * 0x27d4eb2d;
    a = a ^ (a >> 15);
    return a;
}

float hashFloat(float n) {
   return (2.0f * fract(sin(n) * 43758.5453123)) - 1.0f;
}

vec3 hashVec3(float radius, vec3 seed) {
    //float x = hashFloat(seed.z);
    //float y = hashFloat(seed.x);
    //float z = hashFloat(seed.y);

    float x = seed.z;
    float y = seed.x;
    float z = seed.y;

    vec3 v = vec3(x, y, z);
    float mag = length(v);

    v = (mag == 0) ? vec3(1.0f) : (v / mag);
    return v * radius;
}

float cosineSimilarity(vec3 a, vec3 b) {
    float magMult = length(a) * length(b);
    if (magMult <= 0) {
        return 0;
    }

    return dot(a, b) / magMult;
}

vec4 hamiltonProduct(vec4 a, vec4 b) {
    float r = (a.w * b.w) - (a.x * b.x) - (a.y * b.y) - (a.z * b.z);
    float i = (a.w * b.x) + (a.x * b.w) + (a.y * b.z) - (a.z * b.y);
    float j = (a.w * b.y) - (a.x * b.z) + (a.y * b.w) + (a.z * b.x);
    float k = (a.w * b.z) + (a.x * b.y) - (a.y * b.x) + (a.z * b.w);

    return vec4(i, j, k, r);
}

vec4 inverseQuaternion(vec4 q) {
    return vec4(-q.x, -q.y, -q.z, q.w);
}

vec3 rotatePointByQuaternion(vec3 p, vec4 q) {
    vec4 p4 = vec4(p, 0.0f);
    vec4 qi = inverseQuaternion(q);

    return hamiltonProduct(hamiltonProduct(q, p4), qi).xyz;
}

vec4 createQuaternionFromAxisAndTheta(vec3 axis, float theta) {
    float thetaHalved = theta / 2;
    return vec4(sin(thetaHalved) * axis, cos(thetaHalved));
}

vec3 rotatePointByAxisAndTheta(vec3 p, vec3 axis, float theta) {
    return rotatePointByQuaternion(p, createQuaternionFromAxisAndTheta(axis, theta));
}

void rotateAgent(inout Agent agent, inout vec3 forward, float timeDelta) {
    vec3 canonicalForward = vec3(0.0f, 0.0f, -1.0f);

    vec3 initialForward = rotatePointByQuaternion(canonicalForward, agent.rotation);
    vec3 targetDelta = normalize(agent.target - agent.position);

    float cosSim = cosineSimilarity(initialForward, targetDelta);
    float angleBetween = acos(cosSim);

    if (angleBetween == 0.0f) {
        forward = initialForward;
    } else {
        float theta = min(angleBetween, 0.05);
        vec3 targetRight = cross(initialForward, targetDelta);
        vec4 changeInRotation = createQuaternionFromAxisAndTheta(targetRight, theta);

        agent.rotation = normalize(hamiltonProduct(changeInRotation, agent.rotation));
        forward = rotatePointByQuaternion(canonicalForward, agent.rotation);
    }
}

vec3 quadraticEquationFromVec2(const vec2 v) {
    return vec3(v.x * v.x, 2 * v.x * v.y , v.y * v.y);
}

struct QuadraticSolution {
    int exist;
    float sol1;
    float sol2;
};

QuadraticSolution solveQuadraticEquation(vec3 q) {
    if (q.x == 0.0f) {
        return QuadraticSolution(0, 0.0f, 0.0f);
    }

    float b2Minus4AC = (q.y * q.y) - (4 * q.x * q.z);

    if (b2Minus4AC < 0.0f) {
        return QuadraticSolution(0, 0.0f, 0.0f);
    }

    float sqrtB2Minus4AC = sqrt(b2Minus4AC);
    float twoA = 2 * q.x;

    float sol1 = (-q.y + sqrtB2Minus4AC) / twoA;
    float sol2 = (-q.y - sqrtB2Minus4AC) / twoA;

    return QuadraticSolution(1, sol1, sol2);
}

vec3 calculateQuadraticEquationOfTimeToTarget(inout Agent agent) {
    vec3 dxt = quadraticEquationFromVec2(vec2(-agent.velocity.x, agent.target.x - agent.velocity.x));
    vec3 dyt = quadraticEquationFromVec2(vec2(-agent.velocity.x, agent.target.x - agent.velocity.x));
    vec3 dzt = quadraticEquationFromVec2(vec2(-agent.velocity.x, agent.target.x - agent.velocity.x));

    vec3 dt = dxt + dyt + dzt;
    dt.z -= 100.0;

    return dt;
}

/*
void optimizeAcceleration(inout Agent agent) {
    2 * (agent.target - agent.position) = (agent.velocity * t) + ((agent.velocity + (acc * t)) * t)
    2 * (agent.target - agent.position) = t * ((2 * agent.velocity) + acc * t)
    t = (agent.target - agent.position) / (agent.velocity + acc)
}
*/

void flyByWire(inout Agent agent) {
    QuadraticSolution sol = solveQuadraticEquation(calculateQuadraticEquationOfTimeToTarget(agent));
}

void moveAgent(inout Agent agent, vec3 forward, vec3 diff, float timeDelta) {
    // agent.position += forward * maxDistance;
    // agent.position += normalize(delta) * maxDistance;

    float velocityMag = length(agent.velocity);
    vec3 velocityNorm = (velocityMag != 0.0) ? (agent.velocity / velocityMag) : vec3(0.0f);

    float cosSim = cosineSimilarity(agent.velocity, diff);
    agent.velocity += velocityNorm * (cosSim - 1.0) * timeDelta;

    agent.velocity += forward * timeDelta;

    flyByWire(agent);

    agent.position += agent.velocity * timeDelta;
}

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index > NUM_ELEMENTS) { return; }

    float timeDelta = 0.09;
    Agent agent = agents[index];

    float maxDistance = 1;
    vec3 forward = vec3(0.0f, 0.0f, -1.0f);

    vec3 delta = agent.target - agent.position;

    float distanceBetweenTargetAndPosition = length(delta);

    rotateAgent(agent, forward, timeDelta);
    moveAgent(agent, forward, delta / distanceBetweenTargetAndPosition, timeDelta * 0.1);

    if (distanceBetweenTargetAndPosition < maxDistance) {
        agent.target = hashVec3(500.0, agent.position);
    }

    agents[index] = agent;
    agentPositionAndRotation[index] = AgentPositionAndRotation(agent.position, agent.rotation);
}
