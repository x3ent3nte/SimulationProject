#version 450
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512
#define NUM_ELEMENTS 128 * X_DIM

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    vec3 position;
    vec3 target;
    vec4 rotation;
};

struct AgentPositionAndRotation {
    vec3 position;
    vec4 rotation;
};

layout (std430, binding = 0) buffer bufAgents {
    Agent agents[];
};

layout (std430, binding = 1) buffer bufPositions {
    AgentPositionAndRotation agentPositionAndRotation[];
};

int hashInt(int a) {
    a = (a ^ 61) ^ (a >> 16);
    a = a + (a << 3);
    a = a ^ (a >> 4);
    a = a * 0x27d4eb2d;
    a = a ^ (a >> 15);
    return a;
}

float hashFloat(float n) {
   return (2.0f * fract(sin(n) * 43758.5453123)) - 1.0f;
}

vec3 hashVec3(float radius, vec3 seed) {
    float x = hashFloat(seed.z);
    float y = hashFloat(seed.x);
    float z = hashFloat(seed.y);

    vec3 v = vec3(x, y, z);
    float mag = length(v);

    v = (mag == 0) ? vec3(1.0f) : (v / mag);
    return v * radius;
}

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index > NUM_ELEMENTS) { return; }

    float maxDistance = 0.09;

    Agent agent = agents[index];

    vec3 delta = agent.target - agent.position;
    float distanceBetweenTargetAndPosition = length(delta);
    if (distanceBetweenTargetAndPosition < maxDistance) {
        agent.position = agent.target;
        agent.target = hashVec3(260.0, agent.position);
    } else {
        agent.position += normalize(delta) * maxDistance;
    }

    agents[index] = agent;
    agentPositionAndRotation[index] = AgentPositionAndRotation(agent.position, agent.rotation);
}
