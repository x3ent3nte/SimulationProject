#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 256

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    uint typeId;
    int playerId;
    vec3 position;
    vec3 velocity;
    vec3 acceleration;
    vec3 target;
    vec3 rotationalVelocity;
    vec4 rotation;
    float radius;
    float mass;
    float life;
};

struct Collision {
    uint one;
    uint two;
    float time;
};

struct ComputedCollision {
    uint agentIndex;
    float time;
    vec3 velocityDelta;
};

readonly layout (std430, binding = 0) buffer bufferAgentsBuffer {
    Agent agents[];
};

readonly layout (std430, binding = 1) buffer bufferCollisionsBuffer {
    Collision collisions[];
};

writeonly layout (std430, binding = 2) buffer computedCollisionsBuffer {
    ComputedCollision computedCollisions[];
};

readonly layout (std430, binding = 3) buffer numberOfCollisionsBuffer {
    uint numberOfCollisions;
};

vec3 projection(vec3 u, vec3 v) {
    const float magV = length(v);
    return (dot(u, v) / (magV * magV)) * v;
}

void main() {

    const uint index = gl_GlobalInvocationID.x;

    if (index >= numberOfCollisions) { return; }

    const Collision col = collisions[index];

    const Agent one = agents[col.one];
    const Agent two = agents[col.two];

    const vec3 onePosition = one.position + (one.velocity * col.time);
    const vec3 twoPosition = two.position + (two.velocity * col.time);

    const float oneMass = one.mass;
    const float twoMass = two.mass;

    const vec3 posDiff = twoPosition - onePosition;
    const vec3 oneImpactVelocityPre = projection(one.velocity, posDiff);
    const vec3 twoImpactVelocityPre = projection(two.velocity, -posDiff);

    const vec3 oneMomentumPre = oneImpactVelocityPre * oneMass;
    const vec3 twoMomentumPre = twoImpactVelocityPre * twoMass;
    const vec3 totalMomentumPre = oneMomentumPre + twoMomentumPre;

    const vec3 oneImpactVelocityPost = (((oneMass - twoMass) / (oneMass + twoMass)) * oneImpactVelocityPre) + (((2 * twoMass) / (oneMass + twoMass)) * twoImpactVelocityPre);
    const vec3 twoImpactVelocityPost = (totalMomentumPre - (oneImpactVelocityPost * oneMass)) / twoMass;

    const vec3 oneVelocityDelta = -oneImpactVelocityPre + oneImpactVelocityPost;
    const vec3 twoVelocityDelta = -twoImpactVelocityPre + twoImpactVelocityPost;

    //one.velocity += (-oneImpactVelocityPre + oneImpactVelocityPost);
    //two.velocity += (-twoImpactVelocityPre + twoImpactVelocityPost);

    //one.life -= 4.0f;
    //two.life -= 4.0f;

    //agents[col.one] = one;
    //agents[col.two] = two;

    const uint computedCollisionsIndex = 2 * index;
    computedCollisions[computedCollisionsIndex] = ComputedCollision(col.one, col.time, oneVelocityDelta);
    computedCollisions[computedCollisionsIndex + 1] = ComputedCollision(col.two, col.time, twoVelocityDelta);
}
