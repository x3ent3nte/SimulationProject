#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 1

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    uint typeId;
    int playerId;
    vec3 position;
    vec3 velocity;
    vec3 acceleration;
    vec3 target;
    vec3 rotationalVelocity;
    vec4 rotation;
    float radius;
    float mass;
};

struct Collision {
    uint one;
    uint two;
    float time;
};

layout (std430, binding = 0) buffer bufferAgents {
    Agent agents[];
};

readonly layout (std430, binding = 1) buffer bufferCollisions {
    Collision collisions[];
};

float cosineSimilarity(vec3 a, vec3 b) {
    float magMult = length(a) * length(b);
    if (magMult == 0.0f) {
        return 0.0f;
    }

    return dot(a, b) / magMult;
}

void main() {

    Collision col = collisions[0];

    Agent one = agents[col.one];
    Agent two = agents[col.two];

    float oneMass = one.mass;
    float twoMass = two.mass;

    vec3 posDiff = two.position - one.position;
    vec3 oneImpactVelocity = one.velocity * cosineSimilarity(posDiff, one.velocity);
    vec3 twoImpactVelocity = two.velocity * cosineSimilarity(-posDiff, two.velocity);

    vec3 oneMomentumPre = oneImpactVelocity * oneMass;
    vec3 twoMomentumPre = twoImpactVelocity * twoMass;
    vec3 totalMomentum = oneMomentumPre + twoMomentumPre;

    two.velocity += (-twoImpactVelocity + oneImpactVelocity);
    one.velocity += (-oneImpactVelocity + twoImpactVelocity);

    agents[col.one] = one;
    agents[col.two] = two;
}
