#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512

#define ACCELERATION_MAG 27

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    uint typeId;
    int playerId;
    vec3 position;
    vec3 velocity;
    vec3 rotationalVelocity;
    vec4 rotation;
    float radius;
    float mass;
    float life;
};

struct AgentRenderInfo {
    uint typeId;
    vec3 position;
    vec4 rotation;
};

layout (std430, binding = 0) buffer bufAgents {
    Agent agents[];
};

layout (std430, binding = 1) buffer bufPositions {
    AgentRenderInfo agentRenderInfos[];
};

layout (std430, binding = 2) buffer bufferTimeDelta {
    float timeDelta;
};

layout (std430, binding = 3) buffer bufferNumberOfElements {
    uint numberOfElements;
};

int hashInt(int a) {
    a = (a ^ 61) ^ (a >> 16);
    a = a + (a << 3);
    a = a ^ (a >> 4);
    a = a * 0x27d4eb2d;
    a = a ^ (a >> 15);
    return a;
}

float hashFloat(float n) {
   return (2.0f * fract(sin(n) * 43758.5453123)) - 1.0f;
}

vec3 hashVec3(float radius, vec3 seed) {
    //float x = hashFloat(seed.z);
    //float y = hashFloat(seed.x);
    //float z = hashFloat(seed.y);

    float x = seed.z;
    float y = seed.x;
    float z = seed.y;

    vec3 v = vec3(x, y, z);
    float mag = length(v);

    v = (mag == 0) ? vec3(1.0f) : (v / mag);
    return v * radius;
}

vec3 safeNormalize(vec3 v) {
    float mag = length(v);
    return (mag != 0.0f) ? (v / mag) : vec3(0.0f);
}

float cosineSimilarity(vec3 a, vec3 b) {
    float magMult = length(a) * length(b);
    if (magMult == 0.0f) {
        return 0.0f;
    }

    return dot(a, b) / magMult;
}

vec4 hamiltonProduct(vec4 a, vec4 b) {
    float r = (a.w * b.w) - (a.x * b.x) - (a.y * b.y) - (a.z * b.z);
    float i = (a.w * b.x) + (a.x * b.w) + (a.y * b.z) - (a.z * b.y);
    float j = (a.w * b.y) - (a.x * b.z) + (a.y * b.w) + (a.z * b.x);
    float k = (a.w * b.z) + (a.x * b.y) - (a.y * b.x) + (a.z * b.w);

    return vec4(i, j, k, r);
}

vec4 inverseQuaternion(vec4 q) {
    return vec4(-q.x, -q.y, -q.z, q.w);
}

vec3 rotatePointByQuaternion(vec3 p, vec4 q) {
    vec4 p4 = vec4(p, 0.0f);
    vec4 qi = inverseQuaternion(q);

    return hamiltonProduct(hamiltonProduct(q, p4), qi).xyz;
}

vec4 axisAndThetaToQuaternion(vec3 axis, float theta) {
    float thetaHalved = theta / 2;
    return vec4(sin(thetaHalved) * axis, cos(thetaHalved));
}

vec3 rotatePointByAxisAndTheta(vec3 p, vec3 axis, float theta) {
    return rotatePointByQuaternion(p, axisAndThetaToQuaternion(axis, theta));
}

vec3 quadraticEquationFromVec2(const vec2 v) {
    return vec3(v.x * v.x, 2 * v.x * v.y, v.y * v.y);
}

struct QuadraticSolution {
    int exist;
    float sol1;
    float sol2;
};

QuadraticSolution solveQuadraticEquation(vec3 q) {
    if (q.x == 0.0f) {
        return QuadraticSolution(0, 0.0f, 0.0f);
    }

    float b2Minus4AC = (q.y * q.y) - (4 * q.x * q.z);

    if (b2Minus4AC < 0.0f) {
        return QuadraticSolution(0, 0.0f, 0.0f);
    }

    float sqrtB2Minus4AC = sqrt(b2Minus4AC);
    float twoA = 2 * q.x;

    float sol1 = (-q.y + sqrtB2Minus4AC) / twoA;
    float sol2 = (-q.y - sqrtB2Minus4AC) / twoA;

    return QuadraticSolution(1, sol1, sol2);
}

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index > numberOfElements) { return; }

    Agent agent = agents[index];

    agents[index] = agent;
    agentRenderInfos[index] = AgentRenderInfo(agent.typeId, agent.position, agent.rotation);
}
