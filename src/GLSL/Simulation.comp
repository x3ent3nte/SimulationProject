#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512

#define ACCELERATION_MAG 27

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    vec3 position;
    vec3 velocity;
    vec3 acceleration;
    vec3 target;
    vec4 rotation;
    float radius;
};

struct AgentPositionAndRotation {
    vec3 position;
    vec4 rotation;
};

layout (std430, binding = 0) buffer bufAgents {
    Agent agents[];
};

layout (std430, binding = 1) buffer bufPositions {
    AgentPositionAndRotation agentPositionAndRotation[];
};

layout (std430, binding = 2) buffer bufferTimeDelta {
    float timeDelta;
};

layout (std430, binding = 3) buffer bufferNumberOfElements {
    uint numberOfElements;
};

int hashInt(int a) {
    a = (a ^ 61) ^ (a >> 16);
    a = a + (a << 3);
    a = a ^ (a >> 4);
    a = a * 0x27d4eb2d;
    a = a ^ (a >> 15);
    return a;
}

float hashFloat(float n) {
   return (2.0f * fract(sin(n) * 43758.5453123)) - 1.0f;
}

vec3 hashVec3(float radius, vec3 seed) {
    //float x = hashFloat(seed.z);
    //float y = hashFloat(seed.x);
    //float z = hashFloat(seed.y);

    float x = seed.z;
    float y = seed.x;
    float z = seed.y;

    vec3 v = vec3(x, y, z);
    float mag = length(v);

    v = (mag == 0) ? vec3(1.0f) : (v / mag);
    return v * radius;
}

vec3 safeNormalize(vec3 v) {
    float mag = length(v);
    return (mag != 0.0f) ? (v / mag) : vec3(0.0f);
}

float cosineSimilarity(vec3 a, vec3 b) {
    float magMult = length(a) * length(b);
    if (magMult == 0.0f) {
        return 0.0f;
    }

    return dot(a, b) / magMult;
}

vec4 hamiltonProduct(vec4 a, vec4 b) {
    float r = (a.w * b.w) - (a.x * b.x) - (a.y * b.y) - (a.z * b.z);
    float i = (a.w * b.x) + (a.x * b.w) + (a.y * b.z) - (a.z * b.y);
    float j = (a.w * b.y) - (a.x * b.z) + (a.y * b.w) + (a.z * b.x);
    float k = (a.w * b.z) + (a.x * b.y) - (a.y * b.x) + (a.z * b.w);

    return vec4(i, j, k, r);
}

vec4 inverseQuaternion(vec4 q) {
    return vec4(-q.x, -q.y, -q.z, q.w);
}

vec3 rotatePointByQuaternion(vec3 p, vec4 q) {
    vec4 p4 = vec4(p, 0.0f);
    vec4 qi = inverseQuaternion(q);

    return hamiltonProduct(hamiltonProduct(q, p4), qi).xyz;
}

vec4 createQuaternionFromAxisAndTheta(vec3 axis, float theta) {
    float thetaHalved = theta / 2;
    return vec4(sin(thetaHalved) * axis, cos(thetaHalved));
}

vec3 rotatePointByAxisAndTheta(vec3 p, vec3 axis, float theta) {
    return rotatePointByQuaternion(p, createQuaternionFromAxisAndTheta(axis, theta));
}

void rotateAgent(inout Agent agent, inout vec3 forward, float timeDelta) {
    vec3 canonicalForward = vec3(0.0f, 0.0f, -1.0f);

    vec3 initialForward = rotatePointByQuaternion(canonicalForward, agent.rotation);
    vec3 targetDelta = normalize(agent.target - agent.position);

    float cosSim = cosineSimilarity(initialForward, targetDelta);
    float angleBetween = acos(cosSim);

    if (angleBetween == 0.0f) {
        forward = initialForward;
    } else {
        float theta = min(angleBetween, 0.05);
        vec3 targetRight = cross(initialForward, targetDelta);
        vec4 changeInRotation = createQuaternionFromAxisAndTheta(targetRight, theta);

        agent.rotation = normalize(hamiltonProduct(changeInRotation, agent.rotation));
        forward = rotatePointByQuaternion(canonicalForward, agent.rotation);
    }
}

vec3 quadraticEquationFromVec2(const vec2 v) {
    return vec3(v.x * v.x, 2 * v.x * v.y, v.y * v.y);
}

struct QuadraticSolution {
    int exist;
    float sol1;
    float sol2;
};

QuadraticSolution solveQuadraticEquation(vec3 q) {
    if (q.x == 0.0f) {
        return QuadraticSolution(0, 0.0f, 0.0f);
    }

    float b2Minus4AC = (q.y * q.y) - (4 * q.x * q.z);

    if (b2Minus4AC < 0.0f) {
        return QuadraticSolution(0, 0.0f, 0.0f);
    }

    float sqrtB2Minus4AC = sqrt(b2Minus4AC);
    float twoA = 2 * q.x;

    float sol1 = (-q.y + sqrtB2Minus4AC) / twoA;
    float sol2 = (-q.y - sqrtB2Minus4AC) / twoA;

    return QuadraticSolution(1, sol1, sol2);
}

vec3 calculateQuadraticEquationOfTimeToTarget(inout Agent agent) {

    vec3 qxt = quadraticEquationFromVec2(vec2(-agent.velocity.x, -(agent.target.x - agent.position.x)));
    vec3 qyt = quadraticEquationFromVec2(vec2(-agent.velocity.y, -(agent.target.y - agent.position.y)));
    vec3 qzt = quadraticEquationFromVec2(vec2(-agent.velocity.z, -(agent.target.z - agent.position.z)));

    vec3 qt = qxt + qyt + qzt;
    qt.z -= 100.0;

    return qt;
}

float calculateTimeToTarget(vec3 target, vec3 velocity) {
    float targetMag = length(target);
    float velocityMag = length(velocity);

    float cosSim = cosineSimilarity(target, velocity);
    float initialVelocityMag = velocityMag * cosSim;

    float tangentMagSquared = (velocityMag * velocityMag) - (initialVelocityMag * initialVelocityMag);
    float tangentMag = (tangentMagSquared <= 0) ? 0.0f : sqrt(tangentMagSquared);
    float tangentTime = sqrt((2 * tangentMag) / ACCELERATION_MAG);

    float timeToZeroVelocity = initialVelocityMag / ACCELERATION_MAG;
    float phantomDistance = ((initialVelocityMag / 2) * timeToZeroVelocity) + targetMag;
    float phantomTime = sqrt((phantomDistance * 2.0f) / ACCELERATION_MAG);
    float straightTime = phantomTime - timeToZeroVelocity;

    return sqrt((straightTime * straightTime) + (tangentTime * tangentTime));
}

float calculateTimeToTargetNew(vec3 target, vec3 velocity) {
    float targetMag = length(target);
    float velocityMag = length(velocity);

    float cosSim = cosineSimilarity(target, velocity);
    float initialVelocityMag = velocityMag * cosSim;
    float tangentMagSquared = (velocityMag * velocityMag) - (initialVelocityMag * initialVelocityMag);
    float tangentMag = (tangentMagSquared <= 0) ? 0.0f : sqrt(tangentMagSquared);

    float xDist = targetMag;
    float yDist = 0.0f;

    return 0.0f;

    /*
    xDist = (initialVelocityMag * t) + ((aX * t * t) / 2)
    yDist = (tangentMag * t) + ((aY * t * t) / 2)

    ACCELERATION_MAG * ACCELERATION_MAG = (aX * aX) + (aY * aY)
    ay = sqrt(ACCELERATION_MAG * ACCELERATION_MAG) - (aX * aX)

    xDist = (initialVelocityMag * t) + (((ACCMAG * Cos(theta)) * t * t) / 2)
    yDist = (tangentMag * t) + (((ACCMAG * Sin(theta)) * t * t) / 2)
    */
}

vec3 calculateAcceleration(inout Agent agent, float timeDelta) {

    vec3 relativeTarget = agent.target - agent.position;
    float timeToTarget = calculateTimeToTarget(relativeTarget, agent.velocity);

    if (timeToTarget == 0.0f) {
        return vec3(0.0f);
    }

    float xAcc = ((-2 * agent.velocity.x * timeToTarget) + (2 * relativeTarget.x)) / (timeToTarget * timeToTarget);
    float yAcc = ((-2 * agent.velocity.y * timeToTarget) + (2 * relativeTarget.y)) / (timeToTarget * timeToTarget);
    float zAcc = ((-2 * agent.velocity.z * timeToTarget) + (2 * relativeTarget.z)) / (timeToTarget * timeToTarget);

    /*
    accelerationSquared = xAcc^2 + yAcc^2 + zAcc^2
    xAcc = (-2 * agent.velocity.x * timeToTarget^-1) + (2 * relativeTarget.x * timeToTarget^-2)
    xAcc^2 = (4 * agent.velocity.x^2 * timeToTarget^-2) +
            (-8 * agent.velocity.x * relativeTarget.x * timeToTarget^-3) +
            (4 * relativeTarget.x^2 * timeToTarget^-4)

    (4 * 4 * 4 * agent.velocity.x^2 * agent.velocity.y^2 * agent.velocity.z^2) * timeToTarget^-2 +
    (-8 * -8 * -8 * agent.velocity.x * relativeTarget.x * agent.velocity.y * relativeTarget.y * agent.velocity.z * relativeTarget.z) * timeToTarget^-3 +
    (4 * 4 * 4 * relativeTarget.x^2 * relativeTarget.y^2 * relativeTarget.z^2) * timeToTarget^-4 +
    - AccelerationSquared
    = 0

    float timePowerMinusTwoComponent = 64 * agent.velocity.x * agent.velocity.x * agent.velocity.y * agent.velocity.y * agent.velocity.z * agent.velocity.z;
    float timePowerMinusThreeComponent = -512 * agent.velocity.x * relativeTarget.x * agent.velocity.y * relativeTarget.y * agent.velocity.z * relativeTarget.z;
    float timePowerMinusFourComponent = 64 * relativeTarget.x * relativeTarget.x * relativeTarget.y * relativeTarget.y * relativeTarget.z * relativeTarget.z;
    float timeConstantComponent = -ACCELERATION_MAG * ACCELERATION_MAG;
    */

    vec3 acceleration = vec3(xAcc, yAcc, zAcc);

    float targetMag = length(relativeTarget);
    float velocityMag = length(agent.velocity);

    float cosSim = cosineSimilarity(relativeTarget, agent.velocity);
    float initialVelocityMag = velocityMag * cosSim;
    float timeToStop = initialVelocityMag / ACCELERATION_MAG;

    float timeUntilDeceleration = timeToTarget - timeToStop;

    float timeAccelerating = max(0.0f, min(timeDelta, timeUntilDeceleration - timeDelta));

    float proportionOfTimeAccelerating = timeAccelerating / timeDelta;
    float proportionOfTimeDecelerating = 1.0f - proportionOfTimeAccelerating;

    agent.acceleration = acceleration;
    //return acceleration;
    return (proportionOfTimeAccelerating * acceleration) - (proportionOfTimeDecelerating * acceleration);
}

void moveAgent(inout Agent agent, vec3 forward, vec3 diff, float timeDelta) {
    agent.velocity += calculateAcceleration(agent, timeDelta) * timeDelta;

    //agent.position += agent.velocity * timeDelta;
}

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index > numberOfElements) { return; }

    Agent agent = agents[index];

    vec3 forward = vec3(0.0f, 0.0f, -1.0f);
    vec3 delta = agent.target - agent.position;
    float distanceBetweenTargetAndPosition = length(delta);

    rotateAgent(agent, forward, timeDelta);
    moveAgent(agent, forward, delta / distanceBetweenTargetAndPosition, timeDelta);

    float maxDistance = 0.1;
    if (distanceBetweenTargetAndPosition < maxDistance) {
        agent.target = hashVec3(512.0, agent.target);
    }

    agents[index] = agent;
    agentPositionAndRotation[index] = AgentPositionAndRotation(agent.position, agent.rotation);
}
