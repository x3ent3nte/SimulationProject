#version 460
#extension GL_ARB_separate_shader_objects : enable

#define X_DIM 512

layout (local_size_x = X_DIM, local_size_y = 1, local_size_z = 1) in;

struct Agent {
    int typeId;
    int playerId;
    vec3 position;
    vec3 velocity;
    vec3 acceleration;
    vec3 target;
    vec3 rotationalVelocity;
    vec4 rotation;
    float radius;
};

struct AgentPositionAndRotation {
    vec3 position;
    vec4 rotation;
};

layout (std430, binding = 0) buffer agentsBuffer {
    Agent agents[];
};

layout (std430, binding = 1) buffer agentPositionAndRotationBuffer {
    AgentPositionAndRotation agentPositionAndRotations[];
};

layout (std430, binding = 2) buffer playerPositionAndRotationBuffer {
    AgentPositionAndRotation playerPositionAndRotations[];
};

layout (push_constant) uniform InfoBuffer {
    uint numberOfAgents;
} info;

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= info.numberOfAgents) {
        return;
    }

    Agent agent = agents[index];
    AgentPositionAndRotation agentPositionAndRotation = AgentPositionAndRotation(agent.position, agent.rotation);

    agentPositionAndRotations[index] = agentPositionAndRotation;

    if (agent.playerId >= 0) {
        playerPositionAndRotations[agent.playerId] = agentPositionAndRotation;
    }
}
